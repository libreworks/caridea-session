<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Session;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-30 at 11:15:19.
 */
class NativeSessionTest extends \PHPUnit_Framework_TestCase
{
    public function setUp()
    {
        $_SESSION = [];
    }
    
    public function tearDown()
    {
        $_SESSION = [];
    }
    
    /**
     * @covers Caridea\Session\NativeSession::canResume
     * @covers Caridea\Session\NativeSession::__construct
     */
    public function testCanResume()
    {
        $cookies = [];
        $cookies[session_name()] = 'aoeuhtns';
        $object = new NativeSession($cookies);
        $this->assertTrue($object->canResume());
        $object2 = new NativeSession([]);
        $this->assertFalse($object2->canResume());
    }
    
    /**
     * @covers Caridea\Session\NativeSession::clear
     * @covers Caridea\Session\NativeSession::__construct
     * @runInSeparateProcess
     */
    public function testClear()
    {
        $object = new NativeSession([]);
        $object->start();
        $_SESSION['foo'] = 'bar';
        $object->clear();
        $this->assertEmpty($_SESSION);
    }

    /**
     * @covers Caridea\Session\NativeSession::destroy
     * @covers Caridea\Session\NativeSession::__construct
     * @runInSeparateProcess
     */
    public function testDestroyPlugins()
    {
        $plugin = $this->getMockBuilder(Plugin::class)
            ->setMethods(['onDestroy'])
            ->getMock();
        $plugin->expects($this->once())
            ->method('onDestroy')
            ->with($this->isInstanceOf(NativeSession::class));
        
        $object = new NativeSession([], [$plugin]);
        $object->start();
        $this->assertInternalType('bool', $object->destroy());
        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Session\NativeSession::destroy
     * @covers Caridea\Session\NativeSession::__construct
     * @runInSeparateProcess
     */
    public function testDestroyNoCookie()
    {
        if (!extension_loaded('xdebug')) {
            $this->markTestSkipped('Xdebug required for this test');
        }
        ini_set('session.use_cookies', false);
        $object = new NativeSession([]);
        $object->start();
        $this->assertEquals(PHP_SESSION_ACTIVE, session_status());
        $object->destroy();
        $this->assertEquals(PHP_SESSION_NONE, session_status());
        echo '';
        $headers = xdebug_get_headers();
        $found = true;
        foreach ($headers as $header) {
            if (stristr($header, 'Set-Cookie:') && stristr($header, 'deleted')) {
                $found = false;
            }
        }
        $this->assertTrue($found, 'Session unset cookie found');
    }
    
    /**
     * @covers Caridea\Session\NativeSession::destroy
     * @covers Caridea\Session\NativeSession::__construct
     * @runInSeparateProcess
     */
    public function testDestroyCookie()
    {
        if (!extension_loaded('xdebug')) {
            $this->markTestSkipped('Xdebug required for this test');
        }
        $object = new NativeSession([]);
        $object->start();
        $this->assertEquals(PHP_SESSION_ACTIVE, session_status());
        $object->destroy();
        $this->assertEquals(PHP_SESSION_NONE, session_status());
        echo '';
        $headers = xdebug_get_headers();
        $found = false;
        foreach ($headers as $header) {
            if (stristr($header, 'Set-Cookie:') && stristr($header, 'deleted')) {
                $found = true;
            }
        }
        $this->assertTrue($found, 'Session unset cookie not found');
    }

    /**
     * @covers Caridea\Session\NativeSession::getValues
     * @covers Caridea\Session\NativeSession::__construct
     * @runInSeparateProcess
     */
    public function testGetValues()
    {
        $namespace = 'foobar';
        $object = new NativeSession([]);
        $values = $object->getValues($namespace);
        $this->assertInstanceOf(Values::class, $values);
        $this->assertEquals($namespace, $values->getNamespace());
        $this->assertSame($values, $object->getValues($namespace));
    }

    /**
     * @covers Caridea\Session\NativeSession::isStarted
     * @covers Caridea\Session\NativeSession::start
     * @covers Caridea\Session\NativeSession::__construct
     * @runInSeparateProcess
     */
    public function testIsStarted()
    {
        $object = new NativeSession([]);
        $this->assertFalse($object->isStarted());
        $object->start();
        $this->assertTrue($object->isStarted());
        $object->destroy();
        $this->assertFalse($object->isStarted());
    }
    
    /**
     * @covers Caridea\Session\NativeSession::start
     * @covers Caridea\Session\NativeSession::__construct
     * @runInSeparateProcess
     */
    public function testStartPlugins()
    {
        $plugin = $this->getMockBuilder(Plugin::class)
            ->setMethods(['onStart'])
            ->getMock();
        $plugin->expects($this->once())
            ->method('onStart')
            ->with($this->isInstanceOf(NativeSession::class));
        
        $object = new NativeSession([], [$plugin]);
        $this->assertInternalType('bool', $object->start());
        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Session\NativeSession::regenerateId
     * @covers Caridea\Session\NativeSession::__construct
     * @runInSeparateProcess
     */
    public function testRegenerateId()
    {
        session_start();
        $id = session_id();
        $object = new NativeSession([]);
        $object->regenerateId();
        $this->assertNotSame($id, session_id());
    }
    
    /**
     * @covers Caridea\Session\NativeSession::regenerateId
     * @covers Caridea\Session\NativeSession::__construct
     * @runInSeparateProcess
     */
    public function testRegeneratePlugins()
    {
        $plugin = $this->getMockBuilder(Plugin::class)
            ->setMethods(['onRegenerate'])
            ->getMock();
        $plugin->expects($this->once())
            ->method('onRegenerate')
            ->with($this->isInstanceOf(NativeSession::class));
        
        $object = new NativeSession([], [$plugin]);
        $object->start();
        $this->assertInternalType('bool', $object->regenerateId());
        $this->verifyMockObjects();
    }
    
    /**
     * @covers Caridea\Session\NativeSession::resume
     * @covers Caridea\Session\NativeSession::__construct
     * @runInSeparateProcess
     */
    public function testResumeStarted()
    {
        $object = new NativeSession([]);
        $object->start();
        $this->assertTrue($object->resume());
    }

    /**
     * @covers Caridea\Session\NativeSession::resume
     * @covers Caridea\Session\NativeSession::__construct
     */
    public function testResumeNone()
    {
        $object = new NativeSession([]);
        $this->assertFalse($object->resume());
    }
    
    /**
     * @covers Caridea\Session\NativeSession::resume
     * @covers Caridea\Session\NativeSession::__construct
     * @runInSeparateProcess
     */
    public function testResume()
    {
        $cookies = [];
        $cookies[session_name()] = '123';
        $object = new NativeSession($cookies);
        $this->assertTrue($object->resume());
    }
}
